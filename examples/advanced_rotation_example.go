package main

import (
	"context"
	"fmt"
	"os"
	"path/filepath"
	"time"

	"github.com/victorximenis/logger"
	"github.com/victorximenis/logger/core"
)

func advancedRotationExample() {
	fmt.Println("=== Exemplo de Rota√ß√£o Avan√ßada com Hooks e Monitoramento ===")

	// Criar diret√≥rio tempor√°rio para os exemplos
	tempDir := filepath.Join(os.TempDir(), "logger_advanced_rotation")
	os.MkdirAll(tempDir, 0755)
	defer os.RemoveAll(tempDir) // Limpar ap√≥s o exemplo

	ctx := context.Background()

	// Configurar logger com arquivo pequeno para demonstrar rota√ß√£o
	config := logger.Config{
		ServiceName:   "advanced-rotation-service",
		Environment:   "development",
		Output:        logger.OutputFile,
		LogLevel:      core.INFO,
		LogFilePath:   filepath.Join(tempDir, "advanced.log"),
		TenantID:      "tenant-advanced",
		PrettyPrint:   false,
		CallerEnabled: false,
	}

	if err := logger.Init(config); err != nil {
		fmt.Printf("Erro ao inicializar logger: %v\n", err)
		return
	}

	// Obter o OutputManager para configurar hooks
	loggerInstance := logger.GetLogger()
	if loggerInstance == nil {
		fmt.Println("Erro: logger n√£o inicializado")
		return
	}

	// Simular acesso ao OutputManager (em uma implementa√ß√£o real,
	// voc√™ teria acesso direto ao OutputManager)
	outputManager, err := core.NewOutputManager(core.NewOutputConfig(config.LogFilePath))
	if err != nil {
		fmt.Printf("Erro ao criar OutputManager: %v\n", err)
		return
	}
	defer outputManager.Close()

	fmt.Println("1. Configurando hooks de rota√ß√£o:")

	// Hook 1: Notifica√ß√£o simples
	notificationHook := func(event core.RotationEvent) {
		if event.Success {
			fmt.Printf("‚úì [HOOK] Rota√ß√£o bem-sucedida em %s - Arquivo: %s (%d bytes)\n",
				event.Timestamp.Format("15:04:05"), event.OldFile, event.FileSize)
		} else {
			fmt.Printf("‚úó [HOOK] Falha na rota√ß√£o em %s - Erro: %v\n",
				event.Timestamp.Format("15:04:05"), event.Error)
		}
	}

	// Hook 2: Estat√≠sticas detalhadas
	statsHook := func(event core.RotationEvent) {
		lastRotation, count := outputManager.GetRotationStats()
		fmt.Printf("üìä [STATS] Total de rota√ß√µes: %d, √öltima rota√ß√£o: %s\n",
			count, lastRotation.Format("15:04:05"))
	}

	// Hook 3: Simula√ß√£o de backup/upload
	backupHook := func(event core.RotationEvent) {
		if event.Success {
			fmt.Printf("‚òÅÔ∏è  [BACKUP] Simulando upload do arquivo rotacionado para cloud storage...\n")
			time.Sleep(100 * time.Millisecond) // Simular opera√ß√£o de upload
			fmt.Printf("‚òÅÔ∏è  [BACKUP] Upload conclu√≠do com sucesso!\n")
		}
	}

	// Adicionar hooks
	outputManager.AddRotationHook(notificationHook)
	outputManager.AddRotationHook(statsHook)
	outputManager.AddRotationHook(backupHook)

	fmt.Println("‚úì Hooks configurados: notifica√ß√£o, estat√≠sticas e backup")

	fmt.Println("2. Demonstrando monitoramento de tamanho de arquivo:")

	// Gerar logs e monitorar tamanho
	for i := 0; i < 10; i++ {
		logger.Info(ctx).
			Int("iteration", i).
			Str("data", fmt.Sprintf("Log entry %d with some data to increase file size", i)).
			Str("timestamp", time.Now().Format(time.RFC3339)).
			Msg("Exemplo de log para demonstrar monitoramento")

		// Verificar tamanho atual
		if size, err := outputManager.GetCurrentFileSize(); err == nil {
			fmt.Printf("üìè Tamanho atual do arquivo: %d bytes\n", size)
		}

		time.Sleep(100 * time.Millisecond)
	}

	fmt.Println("3. Demonstrando rota√ß√£o manual com recupera√ß√£o:")

	// Executar rota√ß√£o manual
	fmt.Println("üîÑ Executando rota√ß√£o manual...")
	if err := outputManager.RotateWithRecovery(); err != nil {
		fmt.Printf("Erro na rota√ß√£o: %v\n", err)
	} else {
		fmt.Println("‚úì Rota√ß√£o manual executada com sucesso")
	}

	// Aguardar hooks serem executados
	time.Sleep(200 * time.Millisecond)

	fmt.Println("\n4. Demonstrando verifica√ß√£o autom√°tica de rota√ß√£o:")

	// Gerar mais logs para testar verifica√ß√£o autom√°tica
	for i := 0; i < 20; i++ {
		logger.Info(ctx).
			Int("batch", 2).
			Int("iteration", i).
			Str("large_data", fmt.Sprintf("Large log entry %d with substantial amount of data to trigger automatic rotation check", i)).
			Str("extra_field", "additional data to increase log size").
			Msg("Log para testar verifica√ß√£o autom√°tica de rota√ß√£o")

		// Verificar se rota√ß√£o √© necess√°ria
		if err := outputManager.ForceRotationIfNeeded(); err != nil {
			fmt.Printf("Erro na verifica√ß√£o de rota√ß√£o: %v\n", err)
		}

		time.Sleep(50 * time.Millisecond)
	}

	fmt.Println("\n5. Estat√≠sticas finais:")

	lastRotation, totalRotations := outputManager.GetRotationStats()
	fmt.Printf("üìà Total de rota√ß√µes executadas: %d\n", totalRotations)
	if !lastRotation.IsZero() {
		fmt.Printf("üìÖ √öltima rota√ß√£o: %s\n", lastRotation.Format("15:04:05"))
	} else {
		fmt.Printf("üìÖ Nenhuma rota√ß√£o executada\n")
	}

	if size, err := outputManager.GetCurrentFileSize(); err == nil {
		fmt.Printf("üìè Tamanho final do arquivo: %d bytes\n", size)
	}

	fmt.Println("\n6. Demonstrando remo√ß√£o de hooks:")

	// Remover todos os hooks
	outputManager.RemoveAllRotationHooks()
	fmt.Println("üóëÔ∏è  Todos os hooks removidos")

	// Executar rota√ß√£o sem hooks
	fmt.Println("üîÑ Executando rota√ß√£o sem hooks...")
	if err := outputManager.Rotate(); err != nil {
		fmt.Printf("Erro na rota√ß√£o: %v\n", err)
	} else {
		fmt.Println("‚úì Rota√ß√£o executada (sem notifica√ß√µes de hooks)")
	}

	// Aguardar um pouco para confirmar que n√£o h√° hooks
	time.Sleep(100 * time.Millisecond)

	fmt.Println("\n7. Demonstrando configura√ß√£o de rota√ß√£o personalizada:")

	// Criar OutputManager com configura√ß√£o personalizada
	customConfig := core.OutputConfig{
		FilePath:   filepath.Join(tempDir, "custom-rotation.log"),
		MaxSize:    5,    // 5MB
		MaxAge:     3,    // 3 dias
		MaxBackups: 10,   // 10 backups
		Compress:   true, // Comprimir arquivos rotacionados
		LocalTime:  true, // Usar hor√°rio local
	}

	customOM, err := core.NewOutputManager(customConfig)
	if err != nil {
		fmt.Printf("Erro ao criar OutputManager personalizado: %v\n", err)
		return
	}
	defer customOM.Close()

	fmt.Printf("‚öôÔ∏è  Configura√ß√£o personalizada: %s\n", customConfig.String())

	// Adicionar hook personalizado
	customHook := func(event core.RotationEvent) {
		fmt.Printf("üéØ [CUSTOM] Rota√ß√£o personalizada - Compress√£o: %t, Hor√°rio local: %t\n",
			customConfig.Compress, customConfig.LocalTime)
	}

	customOM.AddRotationHook(customHook)

	// Gerar alguns logs no OutputManager personalizado
	writer := customOM.GetWriter()
	for i := 0; i < 5; i++ {
		logLine := fmt.Sprintf("Custom log entry %d with timestamp %s\n", i, time.Now().Format(time.RFC3339))
		writer.Write([]byte(logLine))
	}

	fmt.Println("‚úì Logs escritos no OutputManager personalizado")

	// Listar arquivos criados
	fmt.Println("\n=== Arquivos de log criados ===")
	files, err := filepath.Glob(filepath.Join(tempDir, "*.log*"))
	if err == nil {
		for _, file := range files {
			info, _ := os.Stat(file)
			fmt.Printf("- %s (%d bytes)\n", filepath.Base(file), info.Size())
		}
	}

	fmt.Println("\n=== Exemplo de Rota√ß√£o Avan√ßada Conclu√≠do ===")
	fmt.Printf("Arquivos tempor√°rios em: %s\n", tempDir)
	fmt.Println("(Os arquivos ser√£o removidos automaticamente)")
}
